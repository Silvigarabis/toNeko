plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
}

ext {
    enabled_platforms = getProperty("enabled_platforms").tokenize(',').collect { it.trim() }
    enabled_platform_projects = enabled_platforms.collect { project(":" + it) }
    enabled_platforms.each { platform_type ->
        project(":" + platform_type).ext.platform_type = platform_type
    }

    group = properties["maven_group"]
    version = properties["version"]
    archives_base_name = properties["archives_base_name"]

    ctlibmod_version = properties["ctlibmod_version"]
}

subprojects {
    // 对所有子项目进行配置

    apply plugin: "java"

    version = version + "+" + project.name

    repositories {
        mavenCentral()
        maven {
            name = "Modrinth"
            url = "https://api.modrinth.com/maven"
            content {
                includeGroup "maven.modrinth"
            }
        }
    }

    base {
        archivesName = archives_base_name
    }

    dependencies {
        //implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
        //implementation "net.neoforged:neoforge:20.4.210"
        //modImplementation "maven.modrinth:ctlib:aftzbFe4"
        compileOnly 'org.jetbrains:annotations:24.0.0'
        implementation "maven.modrinth:ctlibmod:${ctlibmod_version}"
    }

}

subprojects {
    // 针对平台构建进行配置
    if (!(project in enabled_platform_projects)){
        return;
    }

    apply plugin: "com.github.johnrengelman.shadow"

    dependencies {
        implementation project(":common")
        shadow project(":common")
        //使用下边的配置以将ctlibmod直接打包进jar
        //shadow "maven.modrinth:ctlibmod:${ctlibmod_version}"
    }

    shadowJar {
        configurations = [project.configurations.shadow]

        archiveClassifier = ""
    }
   
    build {
        dependsOn "shadowJar"
    }
}

import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

task build {
    dependsOn subprojects.collect { it.tasks.named("build") }

    // 复制子项目产出到 build/libs/
    doLast {
        def jarTasks = [ "jar", "remapJar", "sourcesJar", "remapSourcesJar", "shadowJar" ]
    
        def outDir = file("build/libs/");
        outDir.mkdirs();
    
        subprojects.each { project -> jarTasks.each { taskName -> 
            def task = project.tasks.findByPath(taskName);
    
            if (task){
                def out = task.outputs.files.singleFile
                //println "(build/libs/) will copy from task " + task + ":" + out.path
                Files.copy(Paths.get(out.path), Paths.get(outDir.path, out.name), StandardCopyOption.REPLACE_EXISTING);
            }
        }}
        
    }

    // 复制平台构建产出到 out/
    doLast {
        def jarTasks = [ "shadowJar", "jar" ]
    
        def outDir = file("out/");
        outDir.mkdirs();
    
        enabled_platform_projects.each { project ->
            for (def taskName : jarTasks){
                def task = project.tasks.findByPath(taskName);
                if (task){
                    def out = task.outputs.files.singleFile
                    //println "(out/) will copy from task " + task + ":" + out.path
                    Files.copy(Paths.get(out.path), Paths.get(outDir.path, out.name), StandardCopyOption.REPLACE_EXISTING);
                    return;
                }
            }
        }
        
    }
}

task clean(type: Delete){
    delete "build/"
    delete "out/"
}
